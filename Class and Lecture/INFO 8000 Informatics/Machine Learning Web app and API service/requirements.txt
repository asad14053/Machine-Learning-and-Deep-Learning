

1. Create your Oracle Cloud account. 
a. You should have received an email asking you to setup your Oracle Academy Cloud Program account.  Do this now.  It does not require a credit card, but does require you to enter a phone number.
b. Set your home to us-ashburn (east)

2. Create a new cloud compute instance
a. Login to cloud.oracle.com
b. Go to your compute instances
c. Click 
d. Set the Image and Shape: 
i. Image - Canonical Ubuntu 20.04 
ii. Shape - change to ampere 4 core, 24gb (or lower)
e. add your public SSH key (same as github is fine).  You can also create a pair here.
f. Once it is created
g. click on subnet/Default Security List and add tcp/udp 80/443 for 0.0.0.0/0 (all HTTP/HTTPS traffic)

3. Setup NGINX Webserver and configuring the "uncomplicated" firewall
a. ssh into ubuntu@ipaddress
1. sudo apt update
2. sudo apt install nginx
3. sudo ufw allow OpenSSH
4. sudo ufw allow "Nginx Full"
5. sudo ufw enable
6. sudo reboot
b. check http://ipaddress from your browser to verify that nginx is working

4. Setup HTTPS on a domain
a. Register subdomain with https://freedns.afraid.org/ (e.g. x.crabdance.com), or https://freenom.com for a full domain (just not a .com) e.g x.ga
i. Add a dns A record to point at the ip address of your server
b. Wait for that to work (wait until http://yourdomain works)!  It may take several minutes.
c. Secure it with letsencrypt (certbot)
i. sudo snap install core
ii. sudo snap refresh core
iii. sudo snap install --classic certbot
iv. sudo ln -s /snap/bin/certbot /usr/bin/certbot
v. sudo certbot --nginx (handle prompts)
d. Check that https://yourdomain works!

5. Install miniconda 
a. ssh into ubuntu@domain 
b. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh
c. chmod +x Miniconda3-latest-Linux-aarch64.sh
d. ./Miniconda3-latest-Linux-aarch64.sh
e. exit and ssh in again (You should now see (base) in front of your shell prompt)

6. Install jupyterlab and configure 
a. conda install -c conda-forge jupyterlab
b. jupyter lab --generate-config 
c. edit the config file at ~/.jupyter/jupyter_lab_config.py

c.ServerApp.allow_remote_access = True
c.ServerApp.base_url = "/jupyter/"
c.KernelSpecManager.ensure_native_kernel = False

d. Setup jupyter to use your conda environment
i. python -m ipykernel install --user --name base
ii. jupyter kernelspec list
iii. jupyter kernelspec uninstall python3

7. Setup reverse proxy for jupyterlab
a. edit the /etc/nginx/sites-enabled/default file

outside of a server block, include

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

inside of the https server block

location /jupyter/{
		#the main thing
		proxy_pass http://127.0.0.1:8888/jupyter/;
		#makes things work properly for the service
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		
		# websocket stuff
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header X-Scheme $scheme;

		proxy_buffering off;
		
}

b. save/exit
c. sudo systemctl restart nginx
d. test
i. jupyter lab
ii. Go to https://yoursite/jupyter from your browser

8. Setting up Jupyter Lab to run on startup w/ systemd
a. create a new systemd service configuration file jupyter.service

[Unit]
Description=Jupyter Lab
Requires=network.target
After=network.target

[Service]
User=ubuntu
Group=ubuntu
Environment="PATH=/home/ubuntu/miniconda3/bin"
WorkingDirectory=/home/ubuntu/
ExecStart=/home/ubuntu/miniconda3/bin/jupyter lab
[Install]
WantedBy=multi-user.target

b. copy jupyter.service to /etc/systemd/system/
c. sudo systemctl enable jupyter
d. sudo systemctl start jupyter
e. test at https://yoursite/jupyter

9. Getting your own app working
a. conda install -c conda-forge fastapi uvicorn gunicorn
b. Create a main.py file

from fastapi import FastAPI

app = FastAPI(root_path="/myapp")

@app.get("/")
async def root():
    return {"message": "Hello World"}
	
c. Add a reverse proxy for your app in /etc/nginx/sites-enabled/default

location /myapp/{
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_buffering off;
		proxy_pass http://127.0.0.1:8000/;
}

d. sudo systemctl restart nginx
e. run your app with uvicorn main:app 
f. test at https://yoursite/myapp
g. [optional] Setup to run at startup, if desired, by creating another service file (similar to above

[Unit]
Description=My app
Requires=network.target
After=network.target

[Service]
User=ubuntu
Group=ubuntu
Environment="PATH=/home/ubuntu/miniconda3/bin"
WorkingDirectory=/home/ubuntu/
ExecStart=/home/ubuntu/miniconda3/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app
[Install]
WantedBy=multi-user.target





----------------------------------------------------------------------------------



Aside: full nginx configuration file:

#this part is the port HTTP static files server that nginx ships with by default
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	root /var/www/html;
	index index.html index.htm index.nginx-debian.html;
	server_name _;

	location / {
		try_files $uri $uri/ =404;
	}
}

#this part is necessary for websockets (jupyter) to work
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

#this is your core HTTPS server block
server {

	root /var/www/html;
	index index.html index.htm index.nginx-debian.html;
    	server_name info8000sp22.ga; # managed by Certbot
	location / {
		try_files $uri $uri/ =404;
	}

	location /jupyter/{
		#the main thing
		proxy_pass http://127.0.0.1:8888/jupyter/;
		#makes things work properly for the service
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		
		# websocket stuff
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header X-Scheme $scheme;
		proxy_buffering off;
	}


    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/info8000sp22.ga/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/info8000sp22.ga/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

#this part redirects some domains to HTTPS if they try to request HTTP
server {
    if ($host = info8000sp22.ga) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 ;
	listen [::]:80 ;
    server_name info8000sp22.ga;
    return 404; # managed by Certbot
}


